<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 垃圾回收 | 平凡的世界]]></title>
  <link href="http://linuxlsx.github.io/blog/categories/la-ji-hui-shou/atom.xml" rel="self"/>
  <link href="http://linuxlsx.github.io/"/>
  <updated>2019-03-29T21:27:46+08:00</updated>
  <id>http://linuxlsx.github.io/</id>
  <author>
    <name><![CDATA[linuxlsx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[垃圾回收的算法与实现读书笔记-引用计数法]]></title>
    <link href="http://linuxlsx.github.io/blog/2019/03/26/la-ji-hui-shou-de-suan-fa-yu-shi-xian-du-shu-bi-ji-yin-yong-ji-shu-fa/"/>
    <updated>2019-03-26T17:19:43+08:00</updated>
    <id>http://linuxlsx.github.io/blog/2019/03/26/la-ji-hui-shou-de-suan-fa-yu-shi-xian-du-shu-bi-ji-yin-yong-ji-shu-fa</id>
    <content type="html"><![CDATA[<p>在<a href="http://linuxlsx.top/blog/2017/12/28/la-ji-hui-shou-de-suan-fa-yu-shi-xian-du-shu-bi-ji-biao-ji-zheng-li-suan-fa/">上一篇文章</a>中介绍了<code>标记-清除法</code>的实现，这边接着来讲<code>引用计数法</code>的实现</p>

<p>文中部分图片引用自《垃圾回收的算法与实现》一书，如有版权问题，请联系删除。</p>

<h1>引用计数法</h1>

<p><code>引用计数法</code>是George E.Colins 在1960年提出来的。主要思想是:</p>

<pre><code class="C">让每个对象都记录下被多个其他对象引用的数量，当没有其他对象引用时，就可以让该对象被回收。
</code></pre>

<p>引用计数算法理解起来比较简单。首先来看下伪代码</p>

<!-- more -->


<h2>伪代码</h2>

<pre><code class="C">//分配对象
new_obj(size){

    //向堆请求内存分配
    obj = pickup_chunk(size, $free_list)

    if(obj == NULL)
        //如果请求失败的话，直接失败
        allocation_fail()
    else
        //设置初始的引用计数为 1
        obj.ref_cnt = 1
        return obj
}


//引用变化时更新引用计数 ptr-&gt;obj
update_ptr(ptr, obj){
    //增加obj的计数
    inc_ref_cnt(obj)
    //减少原对象的计数
    dec_ref_cnt(*ptr)
    //更新引用
    *ptr = obj
}

//增加对象的引用计数
inc_ref_cnt(obj){
    obj.ref_cnt++
}

//减少对象的引用计数，在这里进行回收
def_ref_cnt(obj){
    obj.ref_cnt--

    if(obj.ref_cnt == 0)
        //当对象的引用计数为0时，遍历所有引用的对象，并将它们的计数减 1
        for (child : children(obj))
            def_ref_cnt(*child)

        //释放对象，回收内存
        reclaim(obj)
    }
}
</code></pre>

<p>更新对象计数时需要先增加目标对象的计数，然后再减少源对象的计数器。这样是为了防止目标对象和源对象是同一个对象时，先减少源对象计数器可能会导致对象计数器归零，被当成垃圾回收掉。</p>

<h2>数据结构</h2>

<p>为了实现引用计数法，需要在对象头中增加一个<code>引用计数器</code>。新的数据结构为：</p>

<pre><code class="Java">public class ReferenceCountObj extends Obj {

    /**
     * 表示该对象的引用计数
     */
    public int count;

}
</code></pre>

<p><code>Obj</code>对象的定义见<a href="http://linuxlsx.top/blog/2017/12/28/la-ji-hui-shou-de-suan-fa-yu-shi-xian-du-shu-bi-ji-biao-ji-zheng-li-suan-fa/">标记-清除法</a></p>

<h2>算法实现</h2>

<p>引用计数算法中主要的处理在<code>update_ptr</code>函数。请看下图，初始状态从根引用<strong>A</strong>和<strong>C</strong>，从<strong>A</strong>引用<strong>B</strong>。<strong>A</strong>持有指向<strong>B</strong>的唯一指针，假设现在将该指针更新到<strong>C</strong>。</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/update_ptr%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0.png?x-oss-process=style/black" alt="update_ptr" /></p>

<p>通过以上的更新，<strong>B</strong>的计数器值变成了<strong>0</strong>，因此<strong>B</strong>被回收了，且<strong>B</strong>连上了空闲列表，可以被重新利用。又因为新形成了由<strong>A</strong>指向<strong>C</strong>的指针，所以<strong>C</strong>的计数器的值增为<strong>2</strong>。</p>

<p>以下是具体的一个实现代码:</p>

<pre><code class="Java">public class ReferenceCountAlgo {

    protected Heap heap;

    public ReferenceCountAlgo(int size, int fitStrategy) {
        heap = new Heap(size, fitStrategy);
    }

    /**
     * 表示GC 的根
     */
    ReferenceCountObj root = new ReferenceCountObj();

    /**
     * 表示已经分配过的对象列表
     */
    protected LinkedList&lt;ReferenceCountObj&gt; allocatedObjList = new LinkedList&lt;&gt;();


    /**
     * 创建一个新的对象
     *
     * @param size 对象的大小
     * @return 创建好的对象
     * @throws OutOfMemoryError 当内存无法满足分配要求时抛出
     */
    public ReferenceCountObj newObj(int size) {

        Slot slot = heap.applySlot(size);

        //对于引用计数法来说，如果slot 为空，说明内存已经耗尽了
        if (slot == null) {
            throw new OutOfMemoryError("------ oh, out of memory! ------");
        }

        ReferenceCountObj obj = initObj(slot);
        allocatedObjList.add(obj);
        return obj;
    }

    /**
     * 建立对象之间的引用关系。 相当于 from = to
     * @param from      引用的起始对象。
     * @param to        应用的目标对象。该对象的引用计数需要加一
     */
    public void reference(ReferenceCountObj from, ReferenceCountObj to) {
        incrRefCount(to);
        from.children.add(to);
    }

    /**
     * 删除对象之间的引用关系。相当于 from = null
     * @param from    引用 '需要解除引用对象' 的对象。 如果 from == null, 说明是要解除和根的引用
     * @param to      需要解除引用的对象。该对象的引用计数会减一
     */
    public void deReference(ReferenceCountObj from, ReferenceCountObj to){

        if(from == null){
            root.children.remove(to);
        }else {
            from.children.remove(to);
        }

        defRefCount(to);
    }

    /**
     * 修改对象的引用关系。相当于从 from = oldTo 变化为 from = newTo
     * @param from
     * @param oldTo
     * @param newTo
     */
    public void changeReference(ReferenceCountObj from, ReferenceCountObj oldTo, ReferenceCountObj newTo){

        from.children.remove(oldTo);
        defRefCount(oldTo);
        from.children.add(newTo);
        incrRefCount(newTo);

    }

    private void incrRefCount(ReferenceCountObj obj) {
        obj.count++;
    }

    private void defRefCount(ReferenceCountObj obj) {
        obj.count--;

        //如果对象的计数变为0，则直接进行回收操作
        if (obj.count == 0) {

            //循环遍历该对象引用的对象，对其进行引用减一操作
            for (Obj child : obj.children) {
                ReferenceCountObj countObj = (ReferenceCountObj) child;
                defRefCount(countObj);
            }

            //释放掉内存
            heap.release(new Slot(obj.start, obj.size));
        }
    }

    private ReferenceCountObj initObj(Slot slot) {
        ReferenceCountObj obj = new ReferenceCountObj();

        obj.start = slot.start;
        obj.size = slot.size;
        //对象的初始化引用计数为 0
        obj.count = 0;

        return obj;
    }

    /**
     * 把对象置为根节点
     *
     * @param obj 根对象
     */
    public void makeItToRoot(ReferenceCountObj obj) {
        root.children.add(obj);
        obj.count++;
    }
}
</code></pre>

<h3>引用计数法的优点</h3>

<pre><code>* 当对象的计数器归零后可立刻回收
* 最大暂停时间短。在操作对象的时候同时进行垃圾回收，不需要专门的阶段来进行回收
* 回收只需要考虑当前对象及其所以引用的对象，不需要从根对象开始
</code></pre>

<h3>引用计数法的缺点</h3>

<pre><code>* 循环引用无法回收。
* 计数器会带来额外的读/写开销，频繁的写操作可能会导致高速缓存失效。所以引用计数法不适合通用的大容量、高性能的内存管理场景。
* 用于计数的计数器必须能够满足一个对象引用堆中所有其他对象的极端情况。所有计数器大小必须和引用类型一样大，会造成内存浪费。
* 在多线程环境中需要保证引用计数的增减以及加载和存储指针的操作都必须原子化。
</code></pre>

<h2>算法优化</h2>

<pre><code>1. 降低计数器带来的开销
   1.1 延迟计数法。将应用计数延迟某个阶段统一的执行
   1.2 合并计数法。不在每次变更都更新计数器，而是关注开始和结束状态，对中间的变更进行合并。
2. 解决循环引用无法回收的问题
   2.1 通过部分标记的方法解决循环引用的问题。
</code></pre>

<h3>延迟计数法</h3>

<p>在<code>延迟计数法</code>中，引入了一个新的结构ZCT(Zero Count Table)，来保存计数器归零的对象。相比原来的实现，有以下几个步骤需要进行调整。</p>

<p><strong>1. 创建对象</strong> 当对象内存分配失败时，要先遍历下ZCT释放内存，然后再次尝试申请内存，如果还是失败的话，就真的是内存不足了。</p>

<pre><code class="Java">    @Override
    public ReferenceCountObj newObj(int size) {
        Slot slot = heap.applySlot(size);
        //对于引用计数法来说，如果slot 为空
        //不直接抛出OOM，而是释放掉ZCT中可以释放的对象
        if (slot == null) {
            scanZctToReleaseMemory();
            slot = heap.applySlot(size);
            if (slot == null) {
                throw new OutOfMemoryError("------ oh, out of memory! ------");
            }
        }
        ReferenceCountObj obj = initObj(slot);
        allocatedObjList.add(obj);

        return obj;
    }
</code></pre>

<p><strong>2. 计数器操作</strong> 当对象计数器的值降到<code>0</code>时，不要直接将对象回收，而是将对象添加到ZCT中。另外为了减少从根节点应用的对象的计数器频繁变更，规定当应用是来自根节点的时候，计数器不加<code>1</code>。</p>

<pre><code class="Java">   /**
     * 模拟和根节点建立引用关系
     * @param obj 根对象
     */
    @Override
    public void makeItToRoot(ReferenceCountObj obj) {
        //如果对象的应用是来自根节点，那么就不要修改对象的计数器
        root.children.add(obj);

        //因为对象的计数器为0，所以将其放到ZCT中
        if (isFull()) {
            scanZctToReleaseMemory();
        }
        zct.add(obj);
    }

    @Override
    public void deReference(ReferenceCountObj from, ReferenceCountObj to) {

        //因为根节点引用的对象初始计数器为0，所以释放的时候不需要操作计数器
        if(from == null){
            root.children.remove(to);
        }else {
            from.children.remove(to);
            defRefCount(to);
        }
    }

    /**
     * 与原始实现不同，当计数器变成0时，将对象放到ZCT中而不是直接释放
     * @param obj
     */
    @Override
    protected void defRefCount(ReferenceCountObj obj) {
        obj.count--;

        //如果对象的计数变为0，则优先把对象放到zct中
        if (obj.count == 0) {
            //如果队列满了，则释放掉队列中的对象
            if (isFull()) {
                scanZctToReleaseMemory();
            }

            zct.add(obj);
        }
    }
</code></pre>

<p>引入ZCT后，根节点引用的对象和计数器为0的对象同时存在ZCT中，如下图所示：</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/zct%E7%A4%BA%E6%84%8F%E5%9B%BE.png?x-oss-process=style/black" alt="ZCT" /></p>

<p><strong>3. 新引入的函数 scanZctToReleaseMemory</strong> 在这个函数中会遍历ZCT，释放内存。</p>

<pre><code class="Java">    private void scanZctToReleaseMemory() {

        //在进行释放操作之前要对根节点引用的对象做计数器加1的动作，防止对象被误回收
        for (Obj child : root.children) {
            ((ReferenceCountObj)child).count++;
        }

        Iterator&lt;Obj&gt; iterator = zct.iterator();
        while (iterator.hasNext()) {

            ReferenceCountObj countObj = (ReferenceCountObj) iterator.next();
            //对于计数器为0的对象，从ZCT中移除
            iterator.remove();
            //并删除该对象回收内存
            if (countObj.count == 0) {
                delete(countObj);
            }
        }

        //在进行释放操作之后要对根节点引用的对象做计数器减1的动作
        //同时将计数器为0的对象也放到 ZCT中
        for (Obj child : root.children) {
            ReferenceCountObj obj = (ReferenceCountObj) child;
            obj.count--;

            if(obj.count == 0){
                zct.add(obj);
            }

        }
    }

    private void delete(ReferenceCountObj countObj){

        //释放内存
        releaseMemory(countObj);

        //减少引用对象的计数器值，如果计数器值为0，回收之
        for (Obj child : countObj.children) {
            ReferenceCountObj childCountObj = (ReferenceCountObj) child;
            childCountObj.count--;
            if(childCountObj.count == 0){
                delete(countObj);
            }
        }
    }
</code></pre>

<p>以下是一个简单的对比，可以看到延迟计数法在对象计数器归零时并没有立刻回收，而原实现是立刻回收的。</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/defered%E6%95%88%E6%9E%9C%E5%88%86%E6%9E%90.png?x-oss-process=style/origin" alt="效果分析" /></p>

<p>优点：延迟计数法的有点是降低了引用频繁变化带来的计数器开销。</p>

<p>缺点：延迟计数法使得垃圾不能立刻回收，同时在多线程环境中需要引入额外的同步机制保证内存清理的正确性。</p>

<h3>部分标记解决循环引用</h3>

<p><code>部分标记</code>的意思是针对部分有可能是循环引用垃圾的对象进行标记。其主要的依据是：</p>

<ul>
<li>在循环引用垃圾内部，所有对象的应用计数均由其内部对象之间的指针产生。</li>
<li>只有再删除某一对象的某个引用后该对象的引用计数仍大于零时，才有可能出现循环引用垃圾。</li>
</ul>


<p>部分标记使用四种不同的颜色来标记对象不同的状态：</p>

<ol>
<li>黑色(BLACK): 绝对不是垃圾的对象</li>
<li>白色(WHITE): 绝对是垃圾对象</li>
<li>灰色(GRAY): 搜索完毕的对象</li>
<li>阴影(HATCH): 可能是循环垃圾的对象</li>
</ol>


<p>部分标记对一个可能的循环引用垃圾进行子图追踪。对于每一个遍历到的每个引用，算法对其目标对象进行试验删除，临时性的减少目标对象的引用计数，从而移除由内部引用产生的计数。追踪完成以后，如果某个对象的计数仍然大于零，则必然是因为循环以外的其他对象引用了该对象，从而判断该对象及其循环引用都不是垃圾。</p>

<p>部分标记的逻辑比较复杂，结合图示例来讲会比较清楚一些。下图是一个引用结构的初始状态，有循环引用的对象群是<strong>ABC</strong>和<strong>DE</strong>,其中<strong>A</strong>和<strong>D</strong>由根引用。此外，<strong>C</strong>和<strong>E</strong>引用到<strong>F</strong>。</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81.png?x-oss-process=style/black" alt="初始状态" /></p>

<p>现在我们删除从根到A对象的引用，逻辑看代码实现：</p>

<pre><code class="Java">    protected void defRefCount(ReferenceCountObj obj) {
        obj.count--;

        //如果对象的计数变为0，则直接进行回收操作
        if (obj.count == 0) {

            //循环遍历该对象引用的对象，对其进行引用减一操作
            for (Obj child : obj.children) {
                ReferenceCountObj countObj = (ReferenceCountObj) child;
                defRefCount(countObj);
            }
            releaseMemory(obj);
        } else if (obj.color != Color.HATCH) {
            //对象的颜色不为 HATCH的时候，将其颜色标记为 HATCH，然后加入到队列中
            obj.color = Color.HATCH;
            hatchQueue.add(obj);
        }
    }
</code></pre>

<p><strong>A</strong>的引用计数减少后的状态如下图，因为<strong>A</strong>的引用计数不为零，所以是疑似的循环垃圾，被标记成了<code>HATCH</code>。
<img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-%E7%A7%BB%E9%99%A4%E6%A0%B9%E5%88%B0A.png?x-oss-process=style/black" alt="A" /></p>

<p>引用计数触发回收的入口都在创建对象的时候，所以创建对象的代码也需要进行修改：</p>

<pre><code class="Java">    public ReferenceCountObj newObj(int size) {
        Slot slot = heap.applySlot(size);
        if (slot != null) {

            ReferenceCountObj obj = initObj(slot);
            //新对象的颜色置为黑色
            obj.color = Color.BLACK;
            allocatedObjList.add(obj);
            return obj;
        } else if (!hatchQueue.isEmpty()) {
            //如果第一次分配失败，就尝试清理疑似垃圾
            scanHatchQueue();
            return newObj(size);
        }
        throw new OutOfMemoryError("------ oh, out of memory! ------");
    }
</code></pre>

<p><code>scanHatchQueue</code>函数会执行可以循环垃圾的子图遍历。</p>

<pre><code class="Java">    public void scanHatchQueue(){
        ReferenceCountObj obj = hatchQueue.poll();
        if(obj.color == Color.HATCH){
            //通过以下三步找出循环垃圾并回收之
            paintGray(obj);
            scanGray(obj);
            collectWhite(obj);
        }else if(!hatchQueue.isEmpty()){
            scanHatchQueue();
        }
    }
</code></pre>

<p><code>paintGray</code>函数会对目标对象进行试验删除，临时性的减少目标对象的引用计数，从而移除由内部引用产生的计数</p>

<pre><code class="Java">    /**
     * 把对象的颜色置为 GRAY，对子对象计数器减1，递归调用 paintGray。
     * @param obj
     */
    public void paintGray(ReferenceCountObj obj){
        if(obj.color == Color.BLACK || obj.color == Color.HATCH){
            obj.color = Color.GRAY;

            for (Obj child : obj.children) {
                ReferenceCountObj c = (ReferenceCountObj) child;
                // 这个地方非常重要，是子对象的计数器减1，而不是父对象。
                // 否则会造成错误回收的情况。
                c.count--;
                paintGray(c);
            }
        }
    }
</code></pre>

<p>对A及其子应用执行完<code>paintGray</code>后的状态。可以看到A,B,C,F都被标记成了灰色，A,B,C的计数为0，F的计数为1</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-%E6%89%AB%E6%8F%8FA.png?x-oss-process=style/black" alt="paintGray" /></p>

<p>下面详细的描述下过程:</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-%E5%BE%AA%E7%8E%AF%E6%A0%87%E8%AE%B0%E5%90%8E.png?x-oss-process=style/black" alt="详细过程" /></p>

<p>首先，在(a)中A被涂成了灰色，程序对B进行了计数器减量操作。在(b)中B也被涂成了灰色，对C进行了减量操作。在&copy;中C被涂成了灰色，对A,F进行了计数器减量的操作。</p>

<p>接下来开始对灰色对象进行扫描。</p>

<pre><code class="Java">    public void scanGray(ReferenceCountObj obj){

        if(obj.color == Color.GRAY){
            if(obj.count &gt; 0){
                //如果经过paintGray操作后，引用计数还是大于零，
                //对象肯定有来自其他对象的引用，则将对象的颜色标记为黑色
                paintBlack(obj);
            }else {
                //对计数为零的对象标记为白色。
                obj.color = Color.WHITE;
                for (Obj child : obj.children) {
                    ReferenceCountObj c = (ReferenceCountObj) child;
                    scanGray(c);
                }
            }
        }
    }
</code></pre>

<p>执行完<code>scanGray</code>之后的状态，A,B,C都被标记成了白色，F因为有来自E的引用，所以重新被标记成了黑色。</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-scanGray.png?x-oss-process=style/black" alt="scanGray" /></p>

<p>最后就是对标记为白色对象进行回收了。</p>

<pre><code class="Java">    public void collectWhite(ReferenceCountObj obj){
        if(obj.color == Color.WHITE){
            obj.color = Color.BLACK;

            for (Obj child : obj.children) {
                ReferenceCountObj c = (ReferenceCountObj) child;
                collectWhite(c);
            }

            releaseMemory(obj);
        }
    }
</code></pre>

<p>回收的状态如下图，至此循环垃圾已经被回收完成了。</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-collectWhite.png?x-oss-process=style/black" alt="回收完成" /></p>

<p>下图表示了在算法中四种颜色的变化示意图:</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/%E9%83%A8%E5%88%86%E6%A0%87%E8%AE%B0-%E9%A2%9C%E8%89%B2%E5%8F%98%E5%8C%96.png?x-oss-process=style/black" alt="颜色变化" /></p>

<p><code>部分标记法</code>可以解决循环垃圾的问题，但是在效率上也存在不足。当对象很多的情况下，遍历对象的成本会变高，会增加垃圾回收的暂停时间。</p>

<h2>总结</h2>

<p>引用计数法虽然思想比较简单，但是工程实现上比较困难。在大型系统上基本上没有用武之地，但是在大多数对象的生命周期简单到直接进行管理的混合场景会比较有效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[垃圾回收的算法与实现读书笔记-标记清除算法]]></title>
    <link href="http://linuxlsx.github.io/blog/2017/12/28/la-ji-hui-shou-de-suan-fa-yu-shi-xian-du-shu-bi-ji-biao-ji-zheng-li-suan-fa/"/>
    <updated>2017-12-28T17:34:51+08:00</updated>
    <id>http://linuxlsx.github.io/blog/2017/12/28/la-ji-hui-shou-de-suan-fa-yu-shi-xian-du-shu-bi-ji-biao-ji-zheng-li-suan-fa</id>
    <content type="html"><![CDATA[<p>作为一个Java 程序员，得益于它的自动垃圾回收机制，极大的降低了因为编程导致的内存问题的发生几率。但是作为一个有追求的程序员，了解垃圾回收的内部实现对工作以及个人发展都是极其有帮助的。</p>

<p>在之前的工作中已经对Java 常用的GC算法有了一些浅显的理解，但是对于算法本身的实现并无深入的了解。后来在网上淘书是发现了这版本《垃圾回收的算法与实现》，试读后发现很不错。于是购买了一本打算深入的学习下。这里就是记录我学习过程中的一些记录以及根据书中伪代码实现完成简单的Java实现。</p>

<h2>GC 算法的分类</h2>

<p>GC 算法的分类主要有一下的几种：</p>

<pre><code>* 标记-清除算法  1960年 John McCarthy 发布了第一个GC算法 标记-清除算法
* 引用计数算法  1960年 George E. Collins 发布了引用计数算法。
* 复制算法  1963年 Marvin L.Minsky 发布了复制算法
* 标记-压缩算法
</code></pre>

<p>后续会按照顺序都会做一个简单的实现。</p>

<!--more-->


<h2>基本数据结构</h2>

<p>首先看下实现过程中使用的数据结构:</p>

<pre><code>* 堆。 堆是存放对象的地方。主要完成两个动作：申请指定大小的内存；释放指定大小的内存

        public class Heap {

            /**
            * 整个堆得大小
            */
            protected int size;

            /**
            * 整个堆已经分配的大小
            */
            protected int allocatedSize;

            /**
            * 堆的分配策略
            */
            protected int fitStrategy;

            public static final int FIRST_FIT_STRATEGY = 1;
            public static final int BEST_FIT_STRATEGY = 2;
            public static final int WORST_FIT_STRATEGY = 3;

            /**
            * 空闲Slot的列表
            */
            protected LinkedList&lt;Slot&gt; emptyList = new LinkedList&lt;Slot&gt;();

            /**
             * 从堆中申请一个指定大小的可用区块
            */
            public Slot applySlot(int size);

            /**
             * 释放指定大小的区块
            */
            public void release(Slot releaseSlot);
        }    

* 对象。表示一个基本的对象，可以知道该对象在内存中的起始位置、大小以及引用的对象

        public class Obj {

            /**
            * 表示对象的大小
            */
            public int size;

            /**
            * 表示对象在中的起始位置
            */
            public int start;

            /**
            * 用来表示对象之间的引用关系
            */
            public LinkedList&lt;Obj&gt; children = new LinkedList&lt;Obj&gt;();
        }

* GC 算法接口。目前只定义了一个创建对象的接口
        public interface GcAlgo {

            /**
            * 创建一个指定大小的对象
            * @param size
            * @return
            */
            Obj newObj(int size);
        }
</code></pre>

<h2>标记-清除算法</h2>

<p>标记-清除算法理解起来还是比较简单的。主要分为两个阶段：</p>

<pre><code>* 标记阶段
    * 首先标记通过根直接可以引用到的对象
    * 然后在标记所有能够访问到的对象
        * 可以通过递归做深度优先访问
        * 可以通过辅助队列做广度优先访问
* 清除阶段
    * 遍历整个堆，回收没有打上标记的对象
</code></pre>

<h3>算法实现</h3>

<p>标记-清除算法需要在对象中增加一个字段来标识对象是否已经被标记。所以我新定义了一个 <strong>MarkSweepObj</strong> 对象</p>

<pre><code>public class MarkSweepObj extends Obj{

    /**
     * 表示对象的标记状态  true : 表示不需要清理，false : 表示需要清理
     */
    public boolean marked;
}
</code></pre>

<p>基本的代码实现</p>

<pre><code>    public void markSweep() {
        //标记阶段
        markPhase();
        //清除阶段
        sweepPhase();
    }

    private void markPhase() {
        //从根节点开始标记对象
        for (MarkSweepObj obj : roots) {
            mark(obj);
        }
    }

    private void mark(MarkSweepObj obj) {
        if (!obj.marked) {
            obj.marked = true;
            //如果有引用对象，则递归标记引用对象
            if (!obj.children.isEmpty()) {
                for (Obj child : obj.children) {
                    mark((MarkSweepObj) child);
                }
            }
        }
    }

    private void sweepPhase() {
        // allocatedObjList 记录了所有分配过的对象
        Iterator&lt;MarkSweepObj&gt; iterator = allocatedObjList.iterator();
        while (iterator.hasNext()) {
            MarkSweepObj obj = iterator.next();
            //如果对象没有标记，则说明该对象从根节点不可达，需要清理掉
            if (!obj.marked) {
                //release 之后会将Slot 添加到空闲列表中
                heap.release(new Slot(obj.start, obj.size));
                iterator.remove();
            } else {
                //将对象的标记归位，供下次GC使用
                obj.marked = false;
            }
        }
    }
</code></pre>

<p>代码看起来可能还有些不那么直观，有图的话就会好很多了。假设下图是GC执行之前的初始状态。</p>

<p><img src="https://s1.ax1x.com/2018/01/02/ppslIe.md.png" alt="标记清除init.png" /></p>

<p>图中绿色的分块表示已经分配的对象，白色的表示空闲的内存。可以看到从根节点直接引用了两个对象，其中一个对象又引用了另外的两个对象。还有几个对象无法从根节点开始访问得到。空闲列表中包含了可用来分配的内存区块。</p>

<p>当标记阶段执行完成以后，整个堆得情况如下：</p>

<p><img src="https://s1.ax1x.com/2018/01/02/ppsuqK.md.png" alt="标记清除marked.png" /></p>

<p>可以看到从根节点开始可以访问到的对象都已经打上了对象存货的标记了。接下来就是执行清除的步骤了。</p>

<p><img src="https://s1.ax1x.com/2018/01/02/ppsMVO.md.png" alt="标记清除sweeped.png" /></p>

<p>可以看到清除之前从根节点不可达的对象都已经被清理，加入到了空闲列表中。其他存活的对象的标记也都重置了。现在空闲列表中总共有3块可供分配的内存区块，大小分别是3，2，6。</p>

<p>以上就是整个标记-清除算法的基本实现，在之前的基本结构中有个 <strong>GcAlgo</strong>，这个接口中定义的 <strong>newOb</strong> 方法又是怎么实现的呢。</p>

<pre><code>    /**
     * 创建一个新的对象
     *
     * @param size 对象的大小
     * @return 创建好的对象
     * @throws OutOfMemoryError 当内存无法满足分配要求时抛出
     */
    public MarkSweepObj newObj(int size) {

        Slot slot = heap.applySlot(size);

        //如果申请到的内存空间为null, 则执行一次GC
        if (slot == null) {

            markSweep();

            slot = heap.applySlot(size);
            //到这里还没有分配成功，说明内存已经不能满足分配的需求
            //直接抛出 OOM 的错误
            if (slot == null) {
                throw new OutOfMemoryError("oh, out of memory!");
            }
        }

        //初始化对象
        MarkSweepObj obj = initObj(slot);
        //将分配好的对象添加到列表中
        allocatedObjList.add(obj);

        return obj;
    }

    //简单的对象初始化，只是记录了对象的开始位置和大小
    private MarkSweepObj initObj(Slot slot) {
        MarkSweepObj obj = new MarkSweepObj();

        obj.start = slot.start;
        obj.size = slot.size;

        return obj;
    }
</code></pre>

<p>逻辑比较简单清晰。首选就是尝试从堆中获取指定大小的内存；如果没有获取得到，就执行一次GC；完了以后再尝试一次内存分配，如果再不成功说明当前内存已经不能满足分配需求了（并不是空间就一定比需求小了），所以抛出OOM的错误。</p>

<p>以上就是这个标记-清理算法的实现逻辑了。具体的代码请查看：<a href="https://github.com/linuxlsx/Algo/tree/master/src/main/java/org/linuxlsx/gc/marksweep">标记-清理算法实现。</a></p>

<h3>执行</h3>

<p>接下来我们执行下，执行的示例代码如下：</p>

<pre><code>    //构建一个容量为20，采用BestFit分配策略的堆
    MarkSweepAlgo algo = new MarkSweepAlgo(20, Heap.FIRST_FIT_STRATEGY);


    try {
        MarkSweepObj obj1 = algo.newObj(4);
        MarkSweepObj obj2 = algo.newObj(3);
        obj1.children.add(obj2);

        MarkSweepObj obj3 = algo.newObj(3);
        algo.makeItToRoot(obj3);

        MarkSweepObj obj4 = algo.newObj(4);
        algo.makeItToRoot(obj4);
        MarkSweepObj obj5 = algo.newObj(2);
        MarkSweepObj obj6 = algo.newObj(3);
        obj4.children.add(obj5);
        obj4.children.add(obj6);


        MarkSweepObj obj7 = algo.newObj(2);

        MarkSweepObj obj8 = algo.newObj(7);
        obj3.children.add(obj8);
        MarkSweepObj obj9 = algo.newObj(4);

        }catch (Throwable e){
            System.out.println(e.getMessage());
        }
</code></pre>

<p>通过以上的代码，模拟创建了如下图所示的对象结构：</p>

<p><img src="https://s1.ax1x.com/2018/01/02/ppsQaD.md.png" alt="标记清除示例初始化.png" /></p>

<p>接下来执行结果：</p>

<p><img src="https://s1.ax1x.com/2018/01/02/pps8Gd.md.jpg" alt="标记清除-算法执行结果1.png" /></p>

<p>可以看到整个过程分配了7个对象，执行了两次GC。最后一次GC执行后堆可用空间是8，这时候我们要分配的<code>obj8</code> 的大小为7，但是却抛出了oom的异常，从最后的日志可以看到，虽然可用空间有8，但是没有单个Slot 能够满足要求。</p>

<p>接下来我们对标记-清理算法做一个总结。</p>

<h3>优点</h3>

<p><code>实现简单</code>是标记-清除算法最大的优点。整个模拟的实现也就200多行代码，真正核心的更少。</p>

<h3>缺点</h3>

<p>相较于优点，标记-清除的缺点就比较多了。</p>

<pre><code>* 碎片化。这个在实际运行的时候已经看到了，在使用过程中会逐渐产生被细化的分块，尽管在总量上内存是够用的，但是实际上却因为碎片化导致对象无法分配。
* 分配速度。每次分配都需要遍历空闲列表
* 与COW(copy-on-write)技术不兼容。现代操作系统会使用COW技术来减少对象的移动，但是标记-清除算法每次都需要修改标记，就会引起不必要的对象移动。
</code></pre>

<h3>优化方案</h3>

<h4>碎片化</h4>

<p>通过适时对空闲列表进行压缩，能够比较有效的解决碎片化的问题。这个在Java 常用的 CMS GC 算法中也有体现，可以通过参数 <code>UseCMSCompactAtFullCollection</code> 和 <code>CMSFullGCsBeforeCompaction=N</code> 来设置压缩策略。</p>

<p>在我们简单的实现中，将空闲列表按照地址排序后，遍历列表将相邻的Slot 合并为一个大的Slot。以下是增加了合并功能之后的执行结果，可以看到压缩 <code>obj8</code> 分配成功了。</p>

<p><img src="https://s1.ax1x.com/2018/01/02/pps3PH.md.jpg" alt="标记清除示例压缩.png" /></p>

<h4>分配速度</h4>

<p>现在我们只使用了一个空闲列表，为了加快速度可以使用多个空闲列表。将相同大小的 Slot 放在一个列表中，这样分配的时候就直接去对应列表的第一个元素就可以了。当然空闲列表也不越多越好，对于大小超过一定限制的可以放到一个列表中。</p>

<h4>兼容COW</h4>

<p>为了能够兼容COW，所以需要将对象的标记存储其他的地方。可以使用位图标记的方式来解决。主要思路是：将堆按照指定大小划分为多个区块，然后每个区块对应到位图中的1位。这样对内存中的对象是存活的对象，就将对应的位图标记置为<code>1</code>，清理的时候就将所有标记为<code>0</code>的对象清理掉就可以了。</p>

<p>以下是简单的代码实现：</p>

<pre><code>
public class MarkSweepWithBitMapAlgo extends MarkSweepAlgo {
    /**
     * 定义一个字的长度
     */
    public static final int WORD_LENGTH = 32;

    private int[] bitmapTable;
    private int bitmapTableSize;

    public MarkSweepWithBitMapAlgo(int size, int fitStrategy) {
        super(size, fitStrategy);
        this.bitmapTableSize = size / WORD_LENGTH + 1;
        //初始化位图标记
        bitmapTable = new int[bitmapTableSize];
    }

    @Override
    public void markSweep() {
        markPhase();
        sweepPhase();
    }

    private void markPhase() {
        for (MarkSweepObj obj : roots) {
            mark(obj);
        }
    }

    private void mark(MarkSweepObj obj) {

        int index = obj.start / WORD_LENGTH;
        int offset = obj.start % WORD_LENGTH;

        if ((bitmapTable[index] &amp; (1 &lt;&lt; offset)) == 0) {
            //将对象对应的标志位置为 1
            bitmapTable[index] |= (1 &lt;&lt; offset);
            for (MarkSweepObj child : obj.children) {
                mark(child);
            }
        }
    }

    private void sweepPhase() {
        int index, offset;

        Iterator&lt;MarkSweepObj&gt; iterator = allocatedObjList.iterator();
        while (iterator.hasNext()) {

            MarkSweepObj obj = iterator.next();
            index = obj.start / WORD_LENGTH;
            offset = obj.start % WORD_LENGTH;

            //标记完成之后标志位为0，说明该对象是需要回收的对象
            if ((bitmapTable[index] &amp; (1 &lt;&lt; offset)) == 0) {
                heap.release(new Slot(obj.start, obj.size));
                iterator.remove();
            }
        }

        //重置标志位
        for (int i = 0; i &lt; bitmapTableSize; i++) {
            bitmapTable[i] = 0;
        }
    }


}
</code></pre>
]]></content>
  </entry>
  
</feed>
