<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ac算法 | 平凡的世界]]></title>
  <link href="http://linuxlsx.github.io/blog/categories/acsuan-fa/atom.xml" rel="self"/>
  <link href="http://linuxlsx.github.io/"/>
  <updated>2019-04-07T23:57:57+08:00</updated>
  <id>http://linuxlsx.github.io/</id>
  <author>
    <name><![CDATA[linuxlsx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关键词匹配算法调研]]></title>
    <link href="http://linuxlsx.github.io/blog/2019/03/21/guan-jian-ci-pi-pei-suan-fa-diao-yan/"/>
    <updated>2019-03-21T22:36:03+08:00</updated>
    <id>http://linuxlsx.github.io/blog/2019/03/21/guan-jian-ci-pi-pei-suan-fa-diao-yan</id>
    <content type="html"><![CDATA[<p>在负责的规则系统中有很大一部分的规则是对用户输入的文本做关键词的匹配。整个关键词功能中有几个概念:</p>

<ul>
<li>匹配词：如果目标文本中存在<code>匹配词</code>，就认为规则是命中的。</li>
<li>排除词：如果目标文本中存在<code>排除词</code>，就认为规则是不命中的。</li>
</ul>


<p>其中<code>排除词</code>的优先于<code>匹配词</code>的。另外还有一个组合概念，就是只有两个或者以上的关键词命中的时候才算命中，这个在<code>排除词</code>和<code>匹配词</code>中都会有。</p>

<p>原本的实现是通过正则表达式的方式实现的。针对每个词都创建一个<code>java.regex.Pattern</code>，再对目标字符串进行匹配。</p>

<p>最新一个新业务提出了需要支持一个规则中最多包含<code>500</code>个关键词，这个长度比我们目前现有规则中最长的关键长了至少<code>10倍</code>。所以现有的实现能否满足整体的性能要求存在疑虑。</p>

<p>调研了现在常用的字符串匹配算法，发现<a href="http://cr.yp.to/bib/1975/aho.pdf">AC多模匹配算法</a>比较适合我们的场景。</p>

<h2>AC多模式匹配算法</h2>

<p>AC多模算法通过将多个关键词构造成一个有限状态机，然后再用状态机来处理输入文本。通过AC算法可以在<code>O(n)</code>时间内完成匹配，而且与关键词的长度无关。</p>

<p>AC算法的主要步骤有:</p>

<ul>
<li>为所有的关键词构造一个前缀树结构</li>
<li>针对前缀树中的每个节点计算出匹配失败后的跳转以及节点的输出</li>
<li>对目标串进行模式匹配</li>
</ul>


<p>其中在完成前两步的过程需要用到三个函数：</p>

<ul>
<li>goto  : 根据当前状态<code>s</code>以及输入字符<code>a</code> 计算出下一个状态<code>s' = goto(s, a)</code></li>
<li>fail  : 当前上一步goto函数的结果为<code>fail</code>时，需要使用该函数计算出下一个状态</li>
<li>output : 当goto函数达到某个状态时，该状态的输出内容</li>
</ul>


<h3>构造Goto Function</h3>

<p>假设现在有一组关键词{he, she, his, hers}，那么通过AC算法构造出来的步骤为:</p>

<ol>
<li><p>树的根节点为<code>0</code>。</p></li>
<li><p>输入 <code>he</code> 的到如下图。其中：<code>goto(0, h)=1 goto(1,e) = 2</code>，同时状态0到状态2得到了关键词<code>he</code>，记录<code>output(2) = [he]</code></p></li>
</ol>


<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/AC%E7%AE%97%E6%B3%95-GOTO1.png?x-oss-process=style/black" alt="AC算法-GOTO1.png" /></p>

<ol>
<li>输入 <code>she</code>。</li>
</ol>


<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/AC%E7%AE%97%E6%B3%95-GOTO2.png?x-oss-process=style/black" alt="AC算法-GOTO2.png" /></p>

<ol>
<li>输入 <code>his</code>。因为已经存在了<code>h</code>的状态转移，所以不需要从根节点开始，直接从节点1开始。</li>
</ol>


<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/AC%E7%AE%97%E6%B3%95-GOTO3.png?x-oss-process=style/black" alt="AC算法-GOTO3.png" /></p>

<ol>
<li>输入 <code>hers</code>。得到最终的树。</li>
</ol>


<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/AC%E7%AE%97%E6%B3%95-GOTO.png?x-oss-process=style/black" alt="AC算法-GOTO.png" /></p>

<h3>构造Fail Function</h3>

<p>在<code>Goto function</code>构建完成以后，就需要构建<code>Fail Function</code>。首先要引入<code>depth</code>的概念: <code>depth</code>表示在goto树中从根节点到节点<code>s</code>的最短路径。针对上述的例子来说：节点1，3的depth为1, 节点2，4，6的depth为2，节点5，7，8的depth为3，节点9的depth为4。</p>

<p>计算失效函数的思路是这样的：首先计算深度为1 的状态的失效函数值，然后是深度为2的，以此类推，直到所有状态的失效函数值都被计算出。同时，算法规定所有深度为1的状态的fail值为0，假设所有深度小于d的状态的fail值都已经计算出，考虑每个深度为d-1的状态r，基于这些已经被计算出的深度为d-1的fail值，是可以得到深度为d的fail值的。</p>

<p>假设正在计算<code>depth=d</code>的节点<code>s</code>的<code>f(s)</code>，那么需要对<code>depth=(d-1)</code>的节点<code>r</code>执行以下的流程:</p>

<ul>
<li>对于所有的字符a，如果goto(r,a) = fail，那么什么也不做</li>
<li>如果goto(r,a) == s，我们记state = <code>f(r)</code>，执行state = f(state)零次或者若干次，直到使得goto(state,a) != fail，因为goto(0,a) != fail，所以这个状态是一定存在的。</li>
<li>记fail(s) = goto(state,a)。</li>
</ul>


<p>那么针对该案例的来讲，计算过程如下:</p>

<pre><code>1. f(1),f(3)=0，因为这两个点depth=1
2. 第二层：
    2.1 节点2：state = f(1) = 0 =&gt; g(0, e) = 0 =&gt; f(2) = 0
    2.2 节点6：state = f(1) = 0 =&gt; g(0, i) = 0 =&gt; f(6) = 0       
    2.3 节点4：state = f(3) = 0 =&gt; g(0, h) = 1 =&gt; f(4) = 1
3. 第三层：
    3.1 节点8：state = f(2) = 0 =&gt; g(0, r) = 0 =&gt; f(8) = 0       
    3.2 节点7：state = f(6) = 0 =&gt; g(0, s) = 3 =&gt; f(7) = 3
    3.3 节点5：state = f(4) = 1 =&gt; g(1, e) = 2 =&gt; f(5) = 2
4. 第四层：
    4.1 节点9：state = f(8) = 0 =&gt; g(0, s) = 3 =&gt; f(9) = 3
</code></pre>

<p>整体的<code>Fail Function</code>结果表为:</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/tmp_table.jpg?x-oss-process=style/black" alt="结构表" /></p>

<p>增加了<code>Fail Function</code>的图为:</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/AC%E7%AE%97%E6%B3%95-GOTO4.png?x-oss-process=style/black" alt="AC算法-GOTO4.png" /></p>

<h3>构造Output函数</h3>

<p><code>Output</code>函数结果的构造在以上两步中一起完成。首先在构造goto函数的时候，会把关键词增加到改关键词最后一个字符关联的节点的输出中。所以在第一步后：节点2，5，7，9的output中会有对应的关键词。</p>

<p>然后在构造<code>Fail Function</code>中，如果output(f(s)) != null，则把output(f(s))的结果添加到output(s)中。</p>

<p>以下是最终的结果表:</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/tmp_table2.jpg?x-oss-process=style/black" alt="结果表" /></p>

<h3>文本匹配</h3>

<p>经过上述的步骤完成构建以后，就可以进行文本匹配了。只需要对文本从前到后进行一次遍历就可以，不需要进行回溯。</p>

<p>该过程的伪代码如下：</p>

<pre><code class="C">    begin
        state &lt;- 0
        for i &lt;- until n do
            begin
                while g(state, ai) == fail do state &lt;- f(state)
                state &lt;- g(state, ai)
                if output(state) != empty then
                    begin
                        print output(state)
                    end 
            end
    end
</code></pre>

<h2>性能比对</h2>

<p>待匹配文本有三种长度: 50个字符，9Kb，36Kb
关键词数量(不存在匹配词): 1个，10个，50个(存在多分组)
关键词数量(存在一个匹配词，在最前): 1个，10个，50个(存在多分组)
关键词数量(存在一个匹配词，在中间): 1个，10个，50个(存在多分组)
关键词数量(存在一个匹配词，在最后): 1个，10个，50个(存在多分组)
关键词数量500。</p>

<p>测试通过JMH框架，单线程执行，预热3次，迭代6次，取平均值，单位为opt/s。</p>

<p>如下图可以看到:</p>

<ul>
<li>1个关键词的时候，原实现性能比AC性能要好。但是AC算法和原实现也没有数量级的差异。</li>
<li>当关键词数量超过10个的时候，AC算法的性能要比原实现好。命中词在最前面算是一个特例，对于原实现来说相当于只有一个词的情况。 当然在短文本的情况下，原实现的绝对数量还是可以的，50个关键词短文本可以达到 18w次/每秒。</li>
<li>500词的情况下，AC算法有绝对的优势。</li>
</ul>


<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/AC%E7%AE%97%E6%B3%95-%E6%95%88%E6%9E%9C.png?x-oss-process=style/black" alt="AC算法-效果.png" /></p>

<p>500个关键词性能表(AC的长串性能比较高，可能是内容中的命中词比较靠前)，可以看到即使在500词的情况下，性能仍然保持在高水平。:</p>

<p><img src="http://0bb6ac2.oss-cn-hongkong.aliyuncs.com/image/tmp_table3.jpg?x-oss-process=style/black" alt="结果表" /></p>

<h2>总结</h2>

<p>AC算法在关键词比较多的情况下性能比原实现有非常明显的优势，特别是在中长文本的情况下。所以对于新需求可以通过AC算法实现，通用情况下也可以考虑使用AC算法实现替换掉。</p>

<h2>参考</h2>

<p><a href="http://cr.yp.to/bib/1975/aho.pdf">AC算法论文</a></p>

<p><a href="https://tech.meituan.com/2014/06/09/ac-algorithm-in-meituan-order-system-practice.html">AC算法在美团上单系统的应用</a></p>
]]></content>
  </entry>
  
</feed>
